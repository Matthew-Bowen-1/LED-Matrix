#include <Arduino.h>

//All characters are based on 5x7 characters
//All characters have an extra blank column and blank row for a footprint of 6x8
const uint8_t characters[128][8] = {
    //First 32 characters are functional characters.
    //These characters do not display
    {0,0,0,0,0,0,0,0}, //0 Nulll
    {0,0,0,0,0,0,0,0}, //1 SOH
    {0,0,0,0,0,0,0,0}, //2 STX
    {0,0,0,0,0,0,0,0}, //3 ETX
    {0,0,0,0,0,0,0,0}, //4 EOT
    {0,0,0,0,0,0,0,0}, //5 ENQ
    {0,0,0,0,0,0,0,0}, //6 ACK
    {0,0,0,0,0,0,0,0}, //7 BEL
    {0,0,0,0,0,0,0,0}, //8 BS
    {0,0,0,0,0,0,0,0}, //9 TAB
    {0,0,0,0,0,0,0,0}, //10 LF
    {0,0,0,0,0,0,0,0}, //11 VT
    {0,0,0,0,0,0,0,0}, //12 FF
    {0,0,0,0,0,0,0,0}, //13 CR
    {0,0,0,0,0,0,0,0}, //14 SO
    {0,0,0,0,0,0,0,0}, //15 SI
    {0,0,0,0,0,0,0,0}, //16 DLE
    {0,0,0,0,0,0,0,0}, //17 DC1
    {0,0,0,0,0,0,0,0}, //18 DC2
    {0,0,0,0,0,0,0,0}, //19 DC3
    {0,0,0,0,0,0,0,0}, //20 DC4
    {0,0,0,0,0,0,0,0}, //21 NAK
    {0,0,0,0,0,0,0,0}, //22 SYN
    {0,0,0,0,0,0,0,0}, //23 ETB
    {0,0,0,0,0,0,0,0}, //24 CAN
    {0,0,0,0,0,0,0,0}, //25 EM
    {0,0,0,0,0,0,0,0}, //26 SUB
    {0,0,0,0,0,0,0,0}, //27 ESC
    {0,0,0,0,0,0,0,0}, //28 FS
    {0,0,0,0,0,0,0,0}, //29 GS
    {0,0,0,0,0,0,0,0}, //30 RS
    {0,0,0,0,0,0,0,0}, //31 US
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // Space
    {0x08,0x08,0x08,0x08,0x08,0x00,0x08,0x00}, // !
    {0x14,0x14,0x14,0x00,0x00,0x00,0x00,0x00}, // "
    {0x14,0x14,0x3E,0x14,0x3E,0x14,0x14,0x00}, // #
    {0x08,0x1E,0x28,0x1C,0x0A,0x3C,0x08,0x00}, //$
    {0x30,0x32,0x04,0x08,0x10,0x26,0x06,0x00}, // %
    {0x18,0x24,0x28,0x10,0x2A,0x24,0x1A,0x00}, // &
    {0x18,0x08,0x10,0x00,0x00,0x00,0x00,0x00}, // '
    {0x04,0x08,0x10,0x10,0x10,0x08,0x04,0x00}, // (
    {0x10,0x08,0x04,0x04,0x04,0x08,0x10,0x00}, // )
    {0x00,0x08,0x2A,0x1C,0x2A,0x08,0x00,0x00}, // *
    {0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00}, // +
    {0x00,0x00,0x00,0x00,0x18,0x08,0x10,0x00}, // ,
    {0x00,0x00,0x00,0x3E,0x00,0x00,0x00,0x00}, // -
    {0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00}, // .
    {0x00,0x02,0x04,0x08,0x10,0x20,0x00,0x00}, // /
    {0x1C,0x22,0x26,0x2A,0x32,0x22,0x1C,0x00}, // 0
    {0x08,0x18,0x08,0x08,0x08,0x08,0x1C,0x00}, // 1
    {0x1C,0x22,0x02,0x04,0x08,0x10,0x3E,0x00}, // 2
    {0x3E,0x04,0x08,0x04,0x02,0x22,0x1C,0x00}, // 3
    {0x04,0x0C,0x14,0x24,0x3E,0x04,0x04,0x00}, // 4
    {0x3E,0x20,0x3C,0x02,0x02,0x22,0x1C,0x00}, // 5
    {0x0C,0x10,0x20,0x3C,0x22,0x22,0x1C,0x00}, // 6
    {0x3E,0x02,0x04,0x08,0x10,0x10,0x10,0x00}, // 7
    {0x1C,0x22,0x22,0x1C,0x22,0x22,0x1C,0x00}, // 8
    {0x1C,0x22,0x22,0x1E,0x02,0x04,0x18,0x00}, // 9
    {0x00,0x18,0x18,0x00,0x18,0x18,0x00,0x00}, // :
    {0x00,0x18,0x18,0x00,0x18,0x08,0x10,0x00}, // ;
    {0x04,0x08,0x10,0x20,0x10,0x08,0x04,0x00}, // <
    {0x00,0x00,0x3E,0x00,0x3E,0x00,0x00,0x00}, // =
    {0x10,0x08,0x04,0x02,0x04,0x08,0x10,0x00}, // >
    {0x1C,0x22,0x02,0x04,0x08,0x00,0x08,0x00}, // ?
    {0x1C,0x22,0x02,0x1A,0x2A,0x2A,0x1C,0x00}, // @
    {0x1C,0x22,0x22,0x22,0x3E,0x22,0x22,0x00}, // A
    {0x3C,0x22,0x22,0x3C,0x22,0x22,0x3C,0x00}, // B
    {0x1C,0x22,0x20,0x20,0x20,0x22,0x1C,0x00}, // C
    {0x38,0x24,0x22,0x22,0x22,0x24,0x38,0x00}, // D
    {0x3E,0x20,0x20,0x3C,0x20,0x20,0x3E,0x00}, // E
    {0x3E,0x20,0x20,0x3C,0x20,0x20,0x20,0x00}, // F
    {0x1C,0x22,0x20,0x2E,0x22,0x22,0x1E,0x00}, // G
    {0x22,0x22,0x22,0x3E,0x22,0x22,0x22,0x00}, // H
    {0x1C,0x08,0x08,0x08,0x08,0x08,0x1C,0x00}, // I
    {0x0E,0x04,0x04,0x04,0x04,0x24,0x18,0x00}, // J
    {0x22,0x24,0x28,0x30,0x28,0x24,0x22,0x00}, // K
    {0x20,0x20,0x20,0x20,0x20,0x20,0x3E,0x00}, // L
    {0x22,0x36,0x2A,0x2A,0x22,0x22,0x22,0x00}, // M
    {0x22,0x22,0x32,0x2A,0x26,0x22,0x22,0x00}, // N
    {0x1C,0x22,0x22,0x22,0x22,0x22,0x1C,0x00}, // O
    {0x3C,0x22,0x22,0x3C,0x20,0x20,0x20,0x00}, // P
    {0x1C,0x22,0x22,0x22,0x2A,0x24,0x1A,0x00}, // Q
    {0x3C,0x22,0x22,0x3C,0x28,0x24,0x22,0x00}, // R
    {0x1E,0x20,0x20,0x1C,0x02,0x02,0x3C,0x00}, // S
    {0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x00}, // T
    {0x22,0x22,0x22,0x22,0x22,0x22,0x1C,0x00}, // U
    {0x22,0x22,0x22,0x22,0x22,0x14,0x08,0x00}, // V
    {0x22,0x22,0x22,0x2A,0x2A,0x2A,0x14,0x00}, // W
    {0x22,0x22,0x14,0x08,0x14,0x22,0x22,0x00}, // X
    {0x22,0x22,0x22,0x14,0x08,0x08,0x08,0x00}, // Y
    {0x3E,0x02,0x04,0x08,0x10,0x20,0x3E,0x00}, // Z
    {0x1C,0x10,0x10,0x10,0x10,0x10,0x1C,0x00}, // [
    {0x00,0x20,0x10,0x08,0x04,0x02,0x00,0x00}, // "\"
    {0x1C,0x04,0x04,0x04,0x04,0x04,0x1C,0x00}, // ]
    {0x08,0x14,0x22,0x00,0x00,0x00,0x00,0x00}, // ^
    {0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00}, // _
    {0x10,0x08,0x04,0x00,0x00,0x00,0x00,0x00}, // `
    {0x00,0x00,0x1C,0x02,0x1E,0x22,0x1E,0x00}, // a
    {0x20,0x20,0x2C,0x32,0x22,0x22,0x3C,0x00}, // b
    {0x00,0x00,0x1C,0x20,0x20,0x22,0x1C,0x00}, // c
    {0x02,0x02,0x1A,0x26,0x22,0x22,0x1E,0x00}, // d
    {0x00,0x00,0x1C,0x22,0x3E,0x20,0x1C,0x00}, // e
    {0x0C,0x12,0x10,0x38,0x10,0x10,0x10,0x00}, // f
    {0x00,0x00,0x1E,0x22,0x22,0x1E,0x02,0x1C}, // g
    {0x20,0x20,0x2C,0x32,0x22,0x22,0x22,0x00}, // h
    {0x00,0x08,0x00,0x18,0x08,0x08,0x1C,0x00}, // i
    {0x00,0x04,0x00,0x0C,0x04,0x04,0x24,0x18}, // j
    {0x20,0x20,0x24,0x28,0x30,0x28,0x24,0x00}, // k
    {0x18,0x08,0x08,0x08,0x08,0x08,0x1C,0x00}, // l
    {0x00,0x00,0x34,0x2A,0x2A,0x22,0x22,0x00}, // m
    {0x00,0x00,0x2C,0x32,0x22,0x22,0x22,0x00}, // n
    {0x00,0x00,0x1C,0x22,0x22,0x22,0x1C,0x00}, // o
    {0x00,0x00,0x3C,0x22,0x3C,0x20,0x20,0x20}, // p
    {0x00,0x00,0x1A,0x26,0x1E,0x02,0x02,0x02}, // q
    {0x00,0x00,0x2C,0x32,0x20,0x20,0x20,0x00}, // r
    {0x00,0x00,0x1C,0x20,0x1C,0x02,0x3C,0x00}, // s
    {0x10,0x10,0x38,0x10,0x10,0x12,0x0C,0x00}, // t
    {0x00,0x00,0x22,0x22,0x22,0x26,0x1A,0x00}, // u
    {0x00,0x00,0x22,0x22,0x22,0x14,0x08,0x00}, // v
    {0x00,0x00,0x22,0x22,0x2A,0x2A,0x14,0x00}, // w
    {0x00,0x00,0x22,0x14,0x08,0x14,0x22,0x00}, // x
    {0x00,0x00,0x22,0x22,0x1E,0x02,0x1C,0x00}, // y
    {0x00,0x00,0x3E,0x04,0x08,0x10,0x3E,0x00}, // z
    {0x04,0x08,0x08,0x10,0x08,0x08,0x04,0x00}, // {
    {0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00}, // |
    {0x10,0x08,0x08,0x04,0x08,0x08,0x10,0x00}, // }
    {0x00,0x00,0x00,0x1A,0x24,0x00,0x00,0x00}, // ~
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // DEL
};

//Set how many frames between updates
void setTextFrameDelay(int newFrameDelay);

//Blank between prints. If so, should blank LED state be set as high or low?
void setBlankBetweenPrints(bool blankBetweenPrints, bool LEDState);  

//Set whether display should invert with every character printed.
void setFlashingCharacters(bool isFlashing);

void scrollPrint(const char *string);
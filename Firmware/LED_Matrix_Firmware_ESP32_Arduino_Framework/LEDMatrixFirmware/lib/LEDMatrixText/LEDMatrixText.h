#include <Arduino.h>

//All characters are based on 5x7 characters
//All characters have an extra blank column and blank row for a footprint of 6x8
const uint8_t characters[128][8] = {
    //First 32 characters are functional characters.
    //These characters do not display
    {0,0,0,0,0,0,0,0}, //0 Nulll
    {0,0,0,0,0,0,0,0}, //1 SOH
    {0,0,0,0,0,0,0,0}, //2 STX
    {0,0,0,0,0,0,0,0}, //3 ETX
    {0,0,0,0,0,0,0,0}, //4 EOT
    {0,0,0,0,0,0,0,0}, //5 ENQ
    {0,0,0,0,0,0,0,0}, //6 ACK
    {0,0,0,0,0,0,0,0}, //7 BEL
    {0,0,0,0,0,0,0,0}, //8 BS
    {0,0,0,0,0,0,0,0}, //9 TAB
    {0,0,0,0,0,0,0,0}, //10 LF
    {0,0,0,0,0,0,0,0}, //11 VT
    {0,0,0,0,0,0,0,0}, //12 FF
    {0,0,0,0,0,0,0,0}, //13 CR
    {0,0,0,0,0,0,0,0}, //14 SO
    {0,0,0,0,0,0,0,0}, //15 SI
    {0,0,0,0,0,0,0,0}, //16 DLE
    {0,0,0,0,0,0,0,0}, //17 DC1
    {0,0,0,0,0,0,0,0}, //18 DC2
    {0,0,0,0,0,0,0,0}, //19 DC3
    {0,0,0,0,0,0,0,0}, //20 DC4
    {0,0,0,0,0,0,0,0}, //21 NAK
    {0,0,0,0,0,0,0,0}, //22 SYN
    {0,0,0,0,0,0,0,0}, //23 ETB
    {0,0,0,0,0,0,0,0}, //24 CAN
    {0,0,0,0,0,0,0,0}, //25 EM
    {0,0,0,0,0,0,0,0}, //26 SUB
    {0,0,0,0,0,0,0,0}, //27 ESC
    {0,0,0,0,0,0,0,0}, //28 FS
    {0,0,0,0,0,0,0,0}, //29 GS
    {0,0,0,0,0,0,0,0}, //30 RS
    {0,0,0,0,0,0,0,0}, //31 US
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // Space 32
    {0x08,0x08,0x08,0x08,0x08,0x00,0x08,0x00}, // ! 33
    {0x14,0x14,0x14,0x00,0x00,0x00,0x00,0x00}, // " 34
    {0x14,0x14,0x3E,0x14,0x3E,0x14,0x14,0x00}, // # 35
    {0x08,0x1E,0x28,0x1C,0x0A,0x3C,0x08,0x00}, // $ 36
    {0x30,0x32,0x04,0x08,0x10,0x26,0x06,0x00}, // % 37
    {0x18,0x24,0x28,0x10,0x2A,0x24,0x1A,0x00}, // & 38
    {0x18,0x08,0x10,0x00,0x00,0x00,0x00,0x00}, // ' 39
    {0x04,0x08,0x10,0x10,0x10,0x08,0x04,0x00}, // ( 40
    {0x10,0x08,0x04,0x04,0x04,0x08,0x10,0x00}, // ) 41
    {0x00,0x08,0x2A,0x1C,0x2A,0x08,0x00,0x00}, // * 42
    {0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00}, // + 43
    {0x00,0x00,0x00,0x00,0x18,0x08,0x10,0x00}, // , 44
    {0x00,0x00,0x00,0x3E,0x00,0x00,0x00,0x00}, // - 45
    {0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00}, // . 46
    {0x00,0x02,0x04,0x08,0x10,0x20,0x00,0x00}, // / 47
    {0x1C,0x22,0x26,0x2A,0x32,0x22,0x1C,0x00}, // 0 48
    {0x08,0x18,0x08,0x08,0x08,0x08,0x1C,0x00}, // 1 49
    {0x1C,0x22,0x02,0x04,0x08,0x10,0x3E,0x00}, // 2 50
    {0x3E,0x04,0x08,0x04,0x02,0x22,0x1C,0x00}, // 3 51
    {0x04,0x0C,0x14,0x24,0x3E,0x04,0x04,0x00}, // 4 52
    {0x3E,0x20,0x3C,0x02,0x02,0x22,0x1C,0x00}, // 5 53
    {0x0C,0x10,0x20,0x3C,0x22,0x22,0x1C,0x00}, // 6 54
    {0x3E,0x02,0x04,0x08,0x10,0x10,0x10,0x00}, // 7 55
    {0x1C,0x22,0x22,0x1C,0x22,0x22,0x1C,0x00}, // 8 56
    {0x1C,0x22,0x22,0x1E,0x02,0x04,0x18,0x00}, // 9 57
    {0x00,0x18,0x18,0x00,0x18,0x18,0x00,0x00}, // : 58
    {0x00,0x18,0x18,0x00,0x18,0x08,0x10,0x00}, // ; 59
    {0x04,0x08,0x10,0x20,0x10,0x08,0x04,0x00}, // < 60
    {0x00,0x00,0x3E,0x00,0x3E,0x00,0x00,0x00}, // = 61
    {0x10,0x08,0x04,0x02,0x04,0x08,0x10,0x00}, // > 62
    {0x1C,0x22,0x02,0x04,0x08,0x00,0x08,0x00}, // ? 63
    {0x1C,0x22,0x02,0x1A,0x2A,0x2A,0x1C,0x00}, // @ 64
    {0x1C,0x22,0x22,0x22,0x3E,0x22,0x22,0x00}, // A 65
    {0x3C,0x22,0x22,0x3C,0x22,0x22,0x3C,0x00}, // B 66
    {0x1C,0x22,0x20,0x20,0x20,0x22,0x1C,0x00}, // C 67
    {0x38,0x24,0x22,0x22,0x22,0x24,0x38,0x00}, // D 68
    {0x3E,0x20,0x20,0x3C,0x20,0x20,0x3E,0x00}, // E 69
    {0x3E,0x20,0x20,0x3C,0x20,0x20,0x20,0x00}, // F 70
    {0x1C,0x22,0x20,0x2E,0x22,0x22,0x1E,0x00}, // G 71
    {0x22,0x22,0x22,0x3E,0x22,0x22,0x22,0x00}, // H 72
    {0x1C,0x08,0x08,0x08,0x08,0x08,0x1C,0x00}, // I 73
    {0x0E,0x04,0x04,0x04,0x04,0x24,0x18,0x00}, // J 74
    {0x22,0x24,0x28,0x30,0x28,0x24,0x22,0x00}, // K 75
    {0x20,0x20,0x20,0x20,0x20,0x20,0x3E,0x00}, // L 76
    {0x22,0x36,0x2A,0x2A,0x22,0x22,0x22,0x00}, // M 77
    {0x22,0x22,0x32,0x2A,0x26,0x22,0x22,0x00}, // N 78
    {0x1C,0x22,0x22,0x22,0x22,0x22,0x1C,0x00}, // O 79
    {0x3C,0x22,0x22,0x3C,0x20,0x20,0x20,0x00}, // P 80
    {0x1C,0x22,0x22,0x22,0x2A,0x24,0x1A,0x00}, // Q 81
    {0x3C,0x22,0x22,0x3C,0x28,0x24,0x22,0x00}, // R 82
    {0x1E,0x20,0x20,0x1C,0x02,0x02,0x3C,0x00}, // S 83
    {0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x00}, // T 84
    {0x22,0x22,0x22,0x22,0x22,0x22,0x1C,0x00}, // U 85
    {0x22,0x22,0x22,0x22,0x22,0x14,0x08,0x00}, // V 86
    {0x22,0x22,0x22,0x2A,0x2A,0x2A,0x14,0x00}, // W 87
    {0x22,0x22,0x14,0x08,0x14,0x22,0x22,0x00}, // X 88
    {0x22,0x22,0x22,0x14,0x08,0x08,0x08,0x00}, // Y 89
    {0x3E,0x02,0x04,0x08,0x10,0x20,0x3E,0x00}, // Z 90
    {0x1C,0x10,0x10,0x10,0x10,0x10,0x1C,0x00}, // [ 91
    {0x00,0x20,0x10,0x08,0x04,0x02,0x00,0x00}, // "\" 92
    {0x1C,0x04,0x04,0x04,0x04,0x04,0x1C,0x00}, // ] 93
    {0x08,0x14,0x22,0x00,0x00,0x00,0x00,0x00}, // ^ 94
    {0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00}, // _ 95
    {0x10,0x08,0x04,0x00,0x00,0x00,0x00,0x00}, // ` 96
    {0x00,0x00,0x1C,0x02,0x1E,0x22,0x1E,0x00}, // a 97
    {0x20,0x20,0x2C,0x32,0x22,0x22,0x3C,0x00}, // b 98
    {0x00,0x00,0x1C,0x20,0x20,0x22,0x1C,0x00}, // c 99
    {0x02,0x02,0x1A,0x26,0x22,0x22,0x1E,0x00}, // d 100
    {0x00,0x00,0x1C,0x22,0x3E,0x20,0x1C,0x00}, // e 101
    {0x0C,0x12,0x10,0x38,0x10,0x10,0x10,0x00}, // f 102
    {0x00,0x00,0x1E,0x22,0x1E,0x02,0x1C,0x00}, // g 103
    {0x20,0x20,0x2C,0x32,0x22,0x22,0x22,0x00}, // h 104
    {0x08,0x00,0x18,0x08,0x08,0x08,0x1C,0x00}, // i 105
    {0x04,0x00,0x0C,0x04,0x04,0x24,0x18,0x00}, // j 106
    {0x20,0x20,0x24,0x28,0x30,0x28,0x24,0x00}, // k 107
    {0x18,0x08,0x08,0x08,0x08,0x08,0x1C,0x00}, // l 108
    {0x00,0x00,0x34,0x2A,0x2A,0x22,0x22,0x00}, // m 109
    {0x00,0x00,0x2C,0x32,0x22,0x22,0x22,0x00}, // n 110
    {0x00,0x00,0x1C,0x22,0x22,0x22,0x1C,0x00}, // o 111
    {0x00,0x00,0x3C,0x22,0x3C,0x20,0x20,0x00}, // p 112
    {0x00,0x00,0x1A,0x26,0x1E,0x02,0x02,0x00}, // q 113
    {0x00,0x00,0x2C,0x32,0x20,0x20,0x20,0x00}, // r 114
    {0x00,0x00,0x1C,0x20,0x1C,0x02,0x3C,0x00}, // s 115
    {0x10,0x10,0x38,0x10,0x10,0x12,0x0C,0x00}, // t 116
    {0x00,0x00,0x22,0x22,0x22,0x26,0x1A,0x00}, // u 117
    {0x00,0x00,0x22,0x22,0x22,0x14,0x08,0x00}, // v 118
    {0x00,0x00,0x22,0x22,0x2A,0x2A,0x14,0x00}, // w 119
    {0x00,0x00,0x22,0x14,0x08,0x14,0x22,0x00}, // x 120
    {0x00,0x00,0x22,0x22,0x1E,0x02,0x1C,0x00}, // y 121
    {0x00,0x00,0x3E,0x04,0x08,0x10,0x3E,0x00}, // z 122
    {0x04,0x08,0x08,0x10,0x08,0x08,0x04,0x00}, // { 123
    {0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00}, // | 124
    {0x10,0x08,0x08,0x04,0x08,0x08,0x10,0x00}, // } 125
    {0x00,0x00,0x00,0x1A,0x24,0x00,0x00,0x00}, // ~ 126
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // DEL 127
};

//Set whether display should invert with every character printed.
void setFlashingCharacters(bool isFlashing);

//Prints a string by scrolling it right to left across the display.
void scrollPrint(const char *string);

//Prints a signed integer value right to left across the display.
void scrollPrintInt(int64_t value);